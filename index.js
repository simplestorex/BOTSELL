const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
// –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É @BotFather
const token = '7224913597:AAGLGC18TDFzOI9Cfe57Iuul-VsTkdBs6fo';
const cryptomusToken = 'YOUR_CRYPTOMUS_API_KEY';

const bot = new TelegramBot(token, { polling: true });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ users.json, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π
function initializeUsersFile() {
    const filePath = path.join(__dirname, 'users.json');

    if (!fs.existsSync(filePath) || fs.readFileSync(filePath, 'utf8').trim() === '') {
        const initialData = { users: [] };
        fs.writeFileSync(filePath, JSON.stringify(initialData, null, 2), 'utf8');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
function addUser(userId) {
    const filePath = path.join(__dirname, 'users.json');

    try {
        let jsonData = fs.readFileSync(filePath, 'utf8');
        let usersData = JSON.parse(jsonData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userExists = usersData.users.some(user => user.id === userId);

        if (!userExists) {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            usersData.users.push({ id: userId, balance: 0 });
            fs.writeFileSync(filePath, JSON.stringify(usersData, null, 2), 'utf8');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON:', error);
    }
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ users.json
    initializeUsersFile();
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addUser(chatId);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.sendMessage(chatId, 'üá∫üá∏ Welcome! Choose an action: \n –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'Linküîó', url: 'https://t.me/twitter_simple' }
                ],
                [
                    { text: 'Check/–ü—Ä–æ–≤–µ—Ä–∏—Ç—åüîç', callback_data: 'check_subscribe' }
                ]
            ]
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const data = query.data;

    if (data === 'check_subscribe') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
        bot.getChatMember('@twitter_simple', query.from.id).then(member => {
            if (member && (member.status === 'member' || member.status === 'administrator' || member.status === 'creator')) {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–≥–ª–∞—à–µ–Ω–∏–∏
                const agreementMessage = `
                –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –∫—É–ø–ª–µ-–ø—Ä–æ–¥–∞–∂–µ Twitter –∞–∫–∫–∞—É–Ω—Ç–∞

                1. –°—Ç–æ—Ä–æ–Ω—ã –°–æ–≥–ª–∞—à–µ–Ω–∏—è

                –ü—Ä–æ–¥–∞–≤–µ—Ü: @Twitter_accs_bot, –¥–∞–ª–µ–µ –ø–æ —Ç–µ–∫—Å—Ç—É "–ü—Ä–æ–¥–∞–≤–µ—Ü".
                –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${query.from.username}, –¥–∞–ª–µ–µ –ø–æ —Ç–µ–∫—Å—Ç—É "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å".

                2. –ü—Ä–µ–¥–º–µ—Ç –°–æ–≥–ª–∞—à–µ–Ω–∏—è

                –ù–∞—Å—Ç–æ—è—â–µ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫–∞—Å–∞–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Twitter, –¥–∞–ª–µ–µ –ø–æ —Ç–µ–∫—Å—Ç—É "–ê–∫–∫–∞—É–Ω—Ç".

                3. –£—Å–ª–æ–≤–∏—è –°–¥–µ–ª–∫–∏

                –ü—Ä–æ–¥–∞–≤–µ—Ü –æ–±—è–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å –ü–æ–∫—É–ø–∞—Ç–µ–ª—é –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ê–∫–∫–∞—É–Ω—Ç (–ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å) –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–∏–Ω–µ–π –≥–∞–ª–æ—á–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂–∏.
                –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–±—è–∑—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∏—Ç—å –ü—Ä–æ–¥–∞–≤—Ü—É —Å—É–º–º—É —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –±–æ—Ç–µ –≤ –æ–±–º–µ–Ω –Ω–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ê–∫–∫–∞—É–Ω—Ç—É.

                4. –ì–∞—Ä–∞–Ω—Ç–∏–∏ –∏ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

                –ü—Ä–æ–¥–∞–≤–µ—Ü –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –ê–∫–∫–∞—É–Ω—Ç–∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—é, –¥–æ—Å—Ç—É–ø –∫ –ê–∫–∫–∞—É–Ω—Ç—É –±—É–¥–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–º (–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –ê–∫–∫–∞—É–Ω—Ç), –∏ –Ω–∞ –ê–∫–∫–∞—É–Ω—Ç–µ –±—É–¥–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∏–Ω—è—è –≥–∞–ª–æ—á–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—Ö–æ–¥–∞ –∏ –Ω–∞–ª–∏—á–∏–∏ —Å–∏–Ω–µ–π –≥–∞–ª–æ—á–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º —Å–¥–µ–ª–∫–∏ –∏ –≤—ã–¥–∞—á–µ–π –µ–≥–æ –ü–æ–∫—É–ø–∞—Ç–µ–ª—é.
                –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –∑–∞–ø—É—Å–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π (Twitter Ads) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ê–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ –µ–≥–æ –ø—Ä–æ–¥–∞–∂–∏.
                –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è –ü–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –ê–∫–∫–∞—É–Ω—Ç–µ –ø–æ—Å–ª–µ –µ–≥–æ –ø–æ–∫—É–ø–∫–∏, –≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –ø—Ä–∏–≤–æ–¥—è—â–∏–µ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ê–∫–∫–∞—É–Ω—Ç–∞.

                5. –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ –ü–æ–ª–æ–∂–µ–Ω–∏—è

                –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ê–∫–∫–∞—É–Ω—Ç–∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–º.
                –õ—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫ –Ω–∞—Å—Ç–æ—è—â–µ–º—É –°–æ–≥–ª–∞—à–µ–Ω–∏—é –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏—Ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ –∏ —Å–æ–≥–ª–∞—Å–∏–∏ –æ–±–µ–∏–º–∏ –°—Ç–æ—Ä–æ–Ω–∞–º–∏.

                6. –ü–æ–ª–∏—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞

                –ó–∞ –Ω–µ–æ–∫–∞–∑–∞–Ω–Ω—É—é –∏–ª–∏ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ–∫–∞–∑–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É, –º—ã –º–æ–∂–µ–º –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫.
                `;

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–≥–ª–∞—à–µ–Ω–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è/–Ω–µ—Å–æ–≥–ª–∞—Å–∏—è
                bot.sendMessage(chatId, agreementMessage, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‚úÖAgree/–°–æ–≥–ª–∞—Å–µ–Ω', callback_data: 'agree' },
                                { text: '‚ùåI don t agree/–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω', callback_data: 'disagree' }
                            ]
                        ]
                    }
                });
            } else {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
                bot.sendMessage(chatId, 'üá∫üá∏ Please subscribe to our channel first to continue.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.');
            }
        }).catch(error => {
            console.error('üá∫üá∏ Error when checking channel subscription: \n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª:', error);
            bot.sendMessage(chatId, 'üá∫üá∏ An error has occurred. Please try again later. \n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        });
    } else if (data === 'agree') {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è
        bot.sendMessage(chatId, 'üá∫üá∏ Choose an action:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            reply_markup: {
                keyboard: [
                    [{ text: 'üõí–ê–∫–∫–∞—É–Ω—Ç—ã/Accounts' }, { text: 'üìö–û—Ç–∑—ã–≤—ã/Reviews' }],
                    [{ text: 'üÜò–ü–æ–¥–¥–µ—Ä–∂–∫–∞/Support' }, { text: 'üë•–ü—Ä–æ—Ñ–∏–ª—å/Profile' }]
                ],
                resize_keyboard: true
            }
        });
    } else if (data === 'disagree') {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
        bot.sendMessage(chatId, 'üá∫üá∏ You refused the agreement.\n–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.');
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
    bot.deleteMessage(chatId, messageId);
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
bot.on('message',(msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    switch (text) {
        case 'üõí–ê–∫–∫–∞—É–Ω—Ç—ã/Accounts':
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤
             const categories = loadCategories();
            let buttons = categories.map(category => ({ text: category.name, callback_data: `category_${category.id}` }));

             bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', {
             reply_markup: {
            inline_keyboard: [buttons]
             }
             });
            break;
        case 'üìö–û—Ç–∑—ã–≤—ã/Reviews':
            bot.sendMessage(chatId, '–û—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ.');
            break;      
        case 'üë•–ü—Ä–æ—Ñ–∏–ª—å/Profile':
            const user = getUserById(chatId); // Fetch user data by chatId

            if (user) {
                bot.sendMessage(chatId, `–ò–º—è: ${msg.from.first_name} ${msg.from.last_name || ''}
                    \nID: ${msg.from.id}
                    \n–ë–∞–ª–∞–Ω—Å: ${user.balance}`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'top_up_balance' }]
                        ]
                    }
                });
            } else {
                bot.sendMessage(chatId, `–ò–º—è: ${msg.from.first_name} ${msg.from.last_name || ''}
                    \nID: ${msg.from.id}
                    \n–ë–∞–ª–∞–Ω—Å: 0`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'top_up_balance' }]
                        ]
                    }
                });
            }
            break;
            case 'üÜò–ü–æ–¥–¥–µ—Ä–∂–∫–∞/Support':
                bot.sendMessage(chatId, 'üá∫üá∏ Support \n –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n https://t.me/Osix7');
            break;
        default:
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –º–µ–Ω—é.');
            break;
    }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const data = query.data;

    if (data.startsWith('category_')) {
        const categoryId = parseInt(data.split('_')[1], 10);
        const accounts = loadAccountsByCategory(categoryId);

        if (accounts.length > 0) {
            let accountButtons = accounts.map(account => ({
                text: `${account.description} - ${account.price}`,
                callback_data: `account_${account.id}`
            }));

            bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`, {
                reply_markup: {
                    inline_keyboard: [accountButtons]
                }
            });
        } else {
            bot.sendMessage(chatId, `–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤.`);
        }
    }

    // Delete the original message with category selection buttons
    bot.deleteMessage(chatId, messageId);
});
// –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data === 'top_up_balance') {
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:');
        
        bot.once('message', async (msg) => {
            const amount = parseFloat(msg.text);

            if (isNaN(amount) || amount <= 0) {
                bot.sendMessage(chatId, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            } else {
                bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Å—É–º–º—É: ${amount}`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üåê Cryptomus', callback_data: `pay_crypto_${amount}` }],
                            [{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_top_up' }]
                        ]
                    }
                });
            }
        });
    } else if (data.startsWith('pay_crypto_')) {
        const amount = parseFloat(data.split('_')[2]);

        try {
            const paymentData = await createCryptomusPayment(amount, chatId);
            bot.sendMessage(chatId, `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: ${paymentData.url}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
        }
    } else if (data === 'cancel_top_up') {
        bot.sendMessage(chatId, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –∏ –ø–æ–∫—É–ø–∫–µ
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const data = query.data;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    if (data.startsWith('account_')) {
        const accountId = parseInt(data.split('_')[1], 10); // –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
        const account = getAccountById(accountId); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ ID

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        bot.sendMessage(chatId, `ID: ${account.id}\n–¶–µ–Ω–∞: ${account.price}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${account.description}`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–ö—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data: `buy_${account.id}` },
                        { text: '<–ù–∞–∑–∞–¥', callback_data: 'back_to_accounts' }
                    ]
                ]
            }
        });
    } else if (data.startsWith('buy_')) {
        const accountId = parseInt(data.split('_')[1], 10); // –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
        const account = getAccountById(accountId); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ ID

        // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        // –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
        bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID: ${account.id}`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üåê Cryptomus', callback_data: `pay_crypto_${account.id}` }],                   
                    [{ text: '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_purchase' }]
                ]
            }
        });    
    } else if (data.startsWith('pay_crypto_')) {
        const parts = data.split('_');
        const accountId = parseInt(parts[1], 10); // –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
        const amount = parseFloat(parts[2]); // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data

        try {
            const paymentData = await createCryptomusPayment(amount, chatId, accountId);
            bot.sendMessage(chatId, `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: ${paymentData.url}`);
        } catch (error) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
        }

    } else if (data === 'cancel_purchase') {
        // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        bot.sendMessage(chatId, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞.');

    } else if (data === 'back_to_accounts') {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        bot.deleteMessage(chatId, messageId); // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.emit('message', { chat: { id: chatId }, text: 'üõí–ê–∫–∫–∞—É–Ω—Ç—ã/Accounts' }); // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–∫–∫–∞—É–Ω—Ç—ã"
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
function sendAccountDetails(chatId, account) {
    if (!account || !account.id || !account.price || !account.description) {
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        return;
    }

    bot.sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∞–∫–∫–∞—É–Ω—Ç ID: ${account.id} –∑–∞ ${account.price}. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞: \nLogin:${account.login} \nPassword:${account.password} \nTOKEN:${account.token} \nEmail:${account.email} \n–û–ø–∏—Å–∞–Ω–∏–µ: ${account.description}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ JSON
function deleteAccount(accountId) {
    const filePath = path.join(__dirname, 'accounts.json');

    try {
        let jsonData = fs.readFileSync(filePath, 'utf8');
        let accountsData = JSON.parse(jsonData);

        // –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
        accountsData.accounts = accountsData.accounts.filter(account => account.id !== accountId);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        fs.writeFileSync(filePath, JSON.stringify(accountsData, null, 2), 'utf8');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ JSON:', error);
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
function loadAccounts() {
    const filePath = path.join(__dirname, 'accounts.json');

    try {
        const jsonData = fs.readFileSync(filePath, 'utf8');
        const accountsData = JSON.parse(jsonData);
        return accountsData.accounts; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞:', error);
        return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–∞
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –µ–≥–æ ID
function getAccountById(accountId) {
    const accounts = loadAccounts();
    return accounts.find(account => account.id === accountId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID
function getUserById(userId) {
    const filePath = path.join(__dirname, 'users.json');

    try {
        const jsonData = fs.readFileSync(filePath, 'utf8');
        const usersData = JSON.parse(jsonData);
        return usersData.users.find(user => user.id === userId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserBalance(userId, amount) {
    const filePath = path.join(__dirname, 'users.json');

    try {
        let jsonData = fs.readFileSync(filePath, 'utf8');
        let usersData = JSON.parse(jsonData);

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        const userIndex = usersData.users.findIndex(user => user.id === userId);
        if (userIndex !== -1) {
            usersData.users[userIndex].balance += amount;
            fs.writeFileSync(filePath, JSON.stringify(usersData, null, 2), 'utf8');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
function loadCategories() {
    const filePath = path.join(__dirname, 'category.json');

    try {
        const jsonData = fs.readFileSync(filePath, 'utf8');
        const categoriesData = JSON.parse(jsonData);
        return categoriesData.categories; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–∞
    }
}
function loadAccountsByCategory(categoryId) {
    const filePath = path.join(__dirname, 'accounts.json');

    try {
        const jsonData = fs.readFileSync(filePath, 'utf8');
        const accountsData = JSON.parse(jsonData);
        const accounts = accountsData.accounts.filter(account => account.categoryId === categoryId);
        return accounts; // Return array of accounts for the specified category
    } catch (error) {
        console.error('Error loading accounts by category:', error.message);
        return []; // Return empty array if error occurs
    }
}

// CRYPTOMUS
async function createCryptomusPayment(amount, userId, accountId = null) {
    try {
        const paymentData = {
            merchant_id: 'your_merchant_id',
            amount: amount,
            currency: 'USD',
            order_id: accountId ? `order_account_${userId}_${accountId}` : `order_balance_${userId}`,
            callback_url: `https://yourdomain.com/webhook`,
            success_url: `https://yourdomain.com/success`
        };

        const response = await axios.post('https://api.cryptomus.com/v1/payment', paymentData, {
            headers: {
                'Authorization': `Bearer ${cryptomusToken}`
            }
        });

        return { url: response.data.payment_url };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Cryptomus:', error.message);
        throw error;
    }
}
// route webhook

// listern port
